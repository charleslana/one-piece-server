generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  admin
  user
}

enum FactionEnum {
  pirate
  marine
  revolutionary
}

enum SeaEnum {
  north_blue @map("north-blue")
  east_blue  @map("east-blue")
  south_blue @map("south-blue")
  west_blue  @map("west-blue")
}

enum BreedEnum {
  human
  dwarf
  giant
  merman
  cyborg
}

enum CharacterClassEnum {
  swordsman
  shooter
  fighter
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique @db.VarChar(255)
  password           String
  bannedTime         DateTime?           @map("banned_time")
  name               String?             @unique @db.VarChar(20)
  faction            FactionEnum?
  sea                SeaEnum?
  breed              BreedEnum?
  characterClass     CharacterClassEnum? @map("character_class")
  level              Int                 @default(1)
  coin               Int                 @default(5000)
  gold               Int                 @default(0)
  exp                Int                 @default(0)
  stamina            Int                 @default(100)
  victoryPve         Int                 @default(0) @map("victory_pve")
  defeatPve          Int                 @default(0) @map("defeat_pve")
  victoryPvp         Int                 @default(0) @map("victory_pvp")
  defeatPvp          Int                 @default(0) @map("defeat_pvp")
  consecutiveVictory Int                 @default(0) @map("consecutive_victory")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @default(now()) @updatedAt @map("updated_at")
  roles              Role[]
  attribute          UserAttribute?
  avatars            UserAvatar[]
  newspapers         UserNewspaper[]
  messagesReceived   UserMessage[]       @relation("User")
  messagesSent       UserMessage[]       @relation("Sender")

  @@map(name: "tb_user")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      RoleEnum @default(user)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_role")
}

model UserAttribute {
  id             Int  @id @default(autoincrement())
  strength       Int  @default(1)
  defense        Int  @default(1)
  agility        Int  @default(1)
  vitality       Int  @default(1)
  energy         Int  @default(1)
  attributePoint Int  @default(5) @map("attribute_point")
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int  @unique @map("user_id")

  @@map(name: "tb_user_attribute")
}

model UserAvatar {
  id        Int      @id @default(autoincrement())
  image     String   @db.VarChar(255)
  selected  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")

  @@map(name: "tb_user_avatar")
}

model Newspaper {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  description    String          @db.VarChar(1000)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at")
  usersNewspaper UserNewspaper[]

  @@map(name: "tb_newspaper")
}

model UserNewspaper {
  id          Int       @id @default(autoincrement())
  like        Boolean
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  newspaper   Newspaper @relation(fields: [newspaperId], references: [id], onDelete: Cascade)
  newspaperId Int       @map("newspaper_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map(name: "tb_user_newspaper")
}

model UserMessage {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  userId      Int      @map("user_id")
  user        User     @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  senderId    Int?     @map("sender_id")
  sender      User?    @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map(name: "tb_user_message")
}
